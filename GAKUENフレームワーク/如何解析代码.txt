如何解析代码
 ●解析代码(阅读别人的代码)是开发工程中一件必须的事情。
  没有解析代码的能力，当GAKUEN的产品出现系统故障时，就不能查找出问题的所在，进而为客户解决问题。 
 ●解析代码基本上是逐行去阅读。十多行的程序，或者是简单的程序这样做还可以，但是遇到复杂的程序，逐行去阅读
  往往容易只见树木不见森林，不能把握程序的全貌。逐行去阅读只是单纯的把代码变成中文(日文)而已。
 ●解析代码最重要的是要把整个程序运行过程在脑海中形成一个概念，弄懂这个程序的目的是做什么的，要实现什么样的
  功能或作用。
 ●而要弄懂程序的功能或作用，第一步是要从「知道这个产品的机能」开始。
  也就是收集所有和产品机能相关的资料，比如「外部设计书」
  外部设计书上不仅记载了产品机能の作用，还包括了机能中各个按钮按下去时处理过程以及数据结构(表数据）等
   通过阅读外部设计书更容易把握产品机能的设计模式。
　※外部设计书构造※※※※※※※※※※※※※※※※※※※※※※※※※※※

 ●阅读完外部设计书后，就要正式开始解析代码了。
　※外部设计书只是简单的记载了产品机能的设计模式，并非内部设计书，各个程序的详细处理方法只有看代码了。
 ●解析代码，首先从理解各个处理方法(method)的目的开始。每个处理方法都有其目的存在。  
　※处理方法(method)※※※※※※※※※※※※※※※※※※※※※※※※※※※

 ●理解处理方法(method)的目的之后，为了达到这个目的，程序进行了哪些处理就可以逐行解析了。
  理解目的的好处是你对程序系统的理解保持在一个正确的方向上。避免一下子扎入到细节的问题上。
 ●复杂的程序(比如loop文里有多个loop),为了把握其处理过程，可以画flowchart流程图助于理解。
　※flowchart流程图※※※※※※※※※※※※※※※※※※※※※※※※※※※

 ●解析代码过程中，弄明白别人的编程思想不是一件很容易的事情，如果有注解的话更有助于理解这段程序的目的及思路。
  但是GAKUEN的产品多数情况下是没有注解的。没有注解的情况下，就要学会自己写注解。
  特别是，阅读代码的时候代码量一般会比较大，如果不及时写注解往往会造成读明白了后边忘了前边，
  造成重复阅读、理解的现象。
  写注解的基本方法
  1,猜测的去写，刚开始阅读一个代码的时候，你很难一下子就确定所有的函数的功能，不妨采用采用猜测的方法去写注解，根据函数的名字、位置写一个大致的注解，当然一般会有错误，但你的注解实际是不但调整的，直到最后你理解了全部代码。
  2, 按功能去写，别把注解写成语法说明书，千万别看到fopen就写打开文件，看到fread就写读数据，这样的注解一点用处都没有，而应该写在此处开发参数配置文件（****。dat）读出系统初始化参数。。。。。，这样才是有用的注解。
  3,在写注解的使用另外要注意的一个问题是分清楚系统自动生成的代码和用户自己开发的代码，一般来说没有必要写系统自动生成的代码。
  4,在主要代码段要写较为详细的注解。有一些函数或类在程序中起关键的作用，那么要写比较详细的注解。这样对你理解代码有很大的帮助。

—————————————————————————————————————————————————
GAKUEN的框架（framework）
 ●框架导入的背景及目的
  GAKUEN框架之前的三层式架构(表现层（UI）- 业务逻辑层（BLL）- 数据访问层（DAL）)有如下缺点：
  ①标准化的不彻底使得相同的代码在各个机能中随处可见
  ②缺乏开发的标准使得品质不过关
  ③导致级联的修改。比如如果在表示层中需要增加一个功能，为保证其设计符合分层式结构，可能需要在相应的业务逻辑层
  和数据访问层中都增加相应的代码，这样就增加了代码量也就增加了后期产品维护的费用。
  为了解决这些问题导入了框架。

 ●框架导入带来的好处
  ①产品开发阶段效率的提高
    通过框架提供的通用化模式管理，降低了开发时间。比如，框架中要变更规格的话，只要修改一处即可。
    这样发现了bug也可以迅速处理。
  ②降低后期产品维护的费用，提高了产品的品质
    框架的导入，规范了开发步骤。能够避免因为开发者技术不一致带来的产品品质的不一致。
    数据访问部分的开发，采用了「DAO（Data Access Objects）」的设计模式，避免了依存RDBMS,使得业务逻辑层和SQL文分离，
    提高了产品后期维护性，保证了产品质量。

 ●GAKUEN的框架（framework）的定义
    依照java的标准式样以Web应用程序框架「JSF(Java Sever Faces)」为基础，满足了REVOLUTION2006产品の机能要件，
    独自扩展了GAKUEN的框架（framework）。

 ●GAKUEN的框架（framework）的构成及职能
  下图是以GAKUEN的框架为基准的应用程序构成图。采用了MVC模式2

　※应用程序构成图※※※※※※※※※※※※※※※※※※※※※※※※※※※


  MVC(Model View Controller)模式2,是模型(model)－视图(view)－控制器(controller)的缩写。
  MVC模式中，JSF主要担当视图(view)层和控制器(controller)层。模型(model)层，通过DAO进行数据访问。
   ●模型(model)层：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。
    action class通过继承共同基层class,REVO/UP基层class的上层class,以便于专注业务逻辑部分的开发。
    业务逻辑的共通部分记述在ActiveRecord上面，能够防止同一逻辑在各个地方出现。action class主要记述
    各个画面固有的业务逻辑部分。数据访问通过DAO来实现。
   ●视图(view)层：是应用程序中处理画面以及数据显示的部分。通过JSP来实现。构成各个画面的部件，通过利用
    UI素材，event driven 来实现
   ●控制器(controller)层：负责从视图读取数据，控制用户输入，并向模型发送数据。
    Servlet的组装被JSP全部隐藏了。开发者不需要意识到这部分的内容也能进行开发。

 ●GAKUEN的框架（framework）的特征
   ●JSF
     是一种用于构建Java Web 应用程序的标准框架。位于视图(view)层。
     它提供了一种以组件为中心的用户界面（UI）构建方法，从而简化了程序的开发。 
     JSF框架中各个技术要素被隐藏了，这样开发者不需要意识到这部分的详细内容也能进行开发。  
   ●DAO（Data Access Object）
     是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在业务逻辑与数据库资源中间。
     在GAKUEN中，只有通过DAO才能访问数据库。
     ●DAO模式的好处
　　　　数据访问和业务逻辑分离，便于数据维护。业务逻辑不需要了解访问细节甚至不知道SQL文，也能访问数据库。
     ●关于ActiveRecord
      ●Active Record （活动记录，以下简称AR）提供了一个面向对象的接口， 用以访问数据库中的数据。
       一个AR类关联一张数据表，每个AR对象对应表中的一行，对象的属性（即 AR 的特性Attribute）映射到数据行的对应列。
      ●ActiveRecord同时负责把自己持久化. 
       在ActiveRecord中封装了对数据库的访问,也封装了部分业务逻辑
       ActiveRecord的对象中保持了记录的值, 是有状态的
      ●ActiveRecord虽然有业务逻辑, 但基本上都是基于单表的
      ●ActiveRecord保存了数据, 使它有时候看上去像数据传输对象(DTO). 但是ActiveRecord有数据库访问能力, 不要把它当DTO用. 

    


